{"version":3,"sources":["components/subtitles.vtt","components/Question.js","components/Subtitle.js","components/Debug.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ButtonItem","_ref","button","handleButtonClick","questionType","react_default","a","createElement","className","concat","class","onClick","e","title","ListButtons","props","buttonsList","buttons","filter","link","map","key","Intro","_ref2","_props$config","config","description","type","RegularQuestion","_ref3","_props$config2","Outro","_ref4","_props$config3","Question","this","showQuestion","Component","Subtitle","cue","text","AllSlides","slides","slide","id","Filename","onButtonClick","Debug","visible","onPlayPause","state","playing","onNext","onToggleMuted","muted","onForceStart","onSlideButtonClick","TYPE_NEXTVIDEO","keyMap","toggleDebug","App","currentQuestion","cues","currentCue","volume","debug","audioPlaying","onToggleDebug","_this","setState","playPause","toggleMuted","arguments","length","undefined","backgroundSound","mute","forceStart","advanceToNextState","nextState","player","seekTo","videoStart","advanceToNextQuestionSlide","nextSlide","nextVideoID","videoEnd","initializeGa","gaID","ReactGA","initialize","pageview","window","location","pathname","search","trackGaEvent","gaAction","event","action","category","handleQuizButtonClick","onProgress","playerState","playedSeconds","_this$state","_config$slides$curren","getCurrentCue","_this2","googleAnalyticsID","WebVTT","vtt","oldVTTCue","VTTCue","parser","Parser","StringDecoder","regions","oncue","push","onregion","region","fetch","subtitles","then","response","parse","flush","currentTime","_cues$filter","startTime","endTime","Object","slicedToArray","_this3","_this$state2","handlers","index_es","focused","ReactPlayer_default","ref","url","videoUrl","youtube","playerVars","showinfo","controls","rel","disablekb","modestbranding","playsinline","progressInterval","width","height","react_howler_lib_default","src","loop","Question_Question","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2afc8693.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/subtitles.966215be.vtt\";","import React, {Component} from 'react'\n\n/**\n * @return {null}\n */\nfunction ButtonItem({button, handleButtonClick, questionType}) {\n    return <li className=\"question__answer-item\">\n        <button className={`button ${button.class}`}\n                onClick={(e) => handleButtonClick(button, questionType, e)}>\n            {button.title}\n        </button>\n    </li>\n}\n\nfunction ListButtons(props) {\n    const buttonsList = props.buttons\n        // remove empty buttons from the list\n        .filter(button => button.link !== null && button.title !== \"\")\n        .map((button) =>\n            <ButtonItem key={button.title} button={button} handleButtonClick={props.handleButtonClick} questionType={props.questionType}/>\n        );\n\n    return (\n        <ul className=\"question__answer-list\">{buttonsList}</ul>\n    )\n}\n\nfunction Intro({props}) {\n    const {title, description, buttons, type} = props.config;\n    return <section className=\"question\">\n        <h2 className=\"question__title\">\n            {title}\n        </h2>\n        <div className=\"question__description\">\n            {description}\n        </div>\n        <ListButtons buttons={buttons} handleButtonClick={props.handleButtonClick} questionType={type}/>\n    </section>\n}\n\nfunction RegularQuestion({props}) {\n    const {title, buttons} = props.config;\n    return <section className=\"question\">\n        <h2 className=\"question__title\">{title}</h2>\n        <ListButtons buttons={buttons} handleButtonClick={props.handleButtonClick} type/>\n    </section>\n}\n\nfunction Outro({props}) {\n    const {title, description, buttons} = props.config;\n    return <section className=\"question\">\n        <h2 className=\"question__title\">\n            {title}\n        </h2>\n        <div className=\"question__description\">\n            {description}\n        </div>\n        <ListButtons buttons={buttons} handleButtonClick={props.handleButtonClick}/>\n    </section>\n}\n\nexport default class Question extends Component {\n\n    render() {\n        const {type} = this.props.config;\n        if (this.props.showQuestion) {\n            switch (type) {\n                case \"intro\":\n                    return <Intro props={this.props}/>;\n                case \"outro\":\n                    return <Outro props={this.props}/>;\n                case \"question\":\n                    return <RegularQuestion props={this.props}/>;\n                default:\n                    return <div>Error loading the question</div>;\n\n            }\n        } else {\n            return null;\n        }\n\n\n    }\n}","import React from 'react'\n\nexport function Subtitle ({cue}) {\n    if(cue) {\n        return <div className=\"subtitle\">{cue.text}</div>\n    } else {\n        return null;\n    }\n}","import React from 'react'\n\n\nfunction AllSlides (props) {\n    return props.slides.map(slide =>\n        <button key={`${slide.id}${slide.Filename}`}\n        onClick={(e) => props.onButtonClick (slide.id, e)}>{slide.id}: {slide.Filename}</button>\n    )\n}\n\nexport function Debug(props) {\n    if (props.visible) {\n        return <div className=\"debug\">\n            <button onClick={props.onPlayPause}>{props.state.playing ? \"Pause\" : \"Play\"}</button>\n            <button onClick={props.onNext}>Next question</button>\n            <button onClick={props.onToggleMuted}>{props.state.muted ? \"Unmute\" : \"Mute\"}</button>\n            <div onClick={props.onForceStart} className=\"force-start\">Force Start</div>\n            <ul>\n                <AllSlides slides={props.state.config.slides}\n                onButtonClick={props.onSlideButtonClick}/>\n            </ul>\n        </div>\n    } else {\n        return null;\n    }\n}","import React, {Component} from 'react';\nimport ReactPlayer from 'react-player'\nimport config from './components/quiz-setup'\nimport vtt from 'vtt.js'\nimport subtitles from './components/subtitles.vtt'\nimport ReactHowler from 'react-howler'\nimport ReactGA from 'react-ga'\nimport {HotKeys} from \"react-hotkeys\";\n\nimport './App.scss';\nimport Question from \"./components/Question\";\nimport {Subtitle} from \"./components/Subtitle\";\nimport {Debug} from \"./components/Debug\";\n\n\nconst TYPE_NEXTVIDEO = \"nextVideo\";\n\nconst keyMap = {\n    toggleDebug: 'command+shift+1'\n};\n\nclass App extends Component {\n\n    state = {\n        playing: true,\n        config: config,\n        currentQuestion: 0,\n        muted: true,\n        showQuestion: true, // first slide must show immediately\n        cues: null,\n        currentCue: null,\n        volume: 0.8,\n        debug: false,\n        audioPlaying: true\n    };\n\n    onToggleDebug = () => {\n        this.setState({debug: !this.state.debug})\n    };\n\n    playPause = () => {\n        this.setState({\n            playing: !this.state.playing,\n            audioPlaying: !this.state.audioPlaying\n        });\n    };\n\n    toggleMuted = (muted = !this.state.muted) => {\n        this.backgroundSound.mute(!this.state.muted);\n        this.setState({muted: !this.state.muted})\n    };\n\n    forceStart = () => {\n        this.setState({muted: false})\n        this.advanceToNextState(0);\n    };\n\n    advanceToNextState = (nextState) => {\n        this.setState({\n            currentQuestion: nextState,\n            showQuestion: false,\n            playing: true\n        });\n        this.player.seekTo(this.state.config.slides[nextState].videoStart);\n    };\n\n    advanceToNextQuestionSlide = (nextState) => {\n        let nextSlide = this.state.config.slides[nextState];\n        // if the type is \"NextVideo\" there's not gonna be any question there so we can just skip it\n        if (nextSlide.type === TYPE_NEXTVIDEO) {\n            this.advanceToNextQuestionSlide(nextSlide.nextVideoID)\n        } else {\n            this.setState({\n                currentQuestion: nextState,\n                showQuestion: true,\n                playing: true\n            });\n            this.player.seekTo(this.state.config.slides[nextState].videoEnd - 1);\n        }\n    };\n\n    initializeGa = (gaID) => {\n        if (gaID !== \"\") {\n            ReactGA.initialize(gaID);\n            // Taken from example here: https://github.com/react-ga/react-ga#with-npm\n            ReactGA.pageview(window.location.pathname + window.location.search);\n        }\n    };\n\n    // There will propably be more params here, like \"Category\" and \"Label\" not just action\n    trackGaEvent = gaAction => {\n        if (gaAction !== \"\") {\n            ReactGA.event({\n                action: gaAction,\n                category: \"fooo\" // there must be something more meaningful here\n            });\n        }\n    };\n\n    handleQuizButtonClick = ({link, title, \"ga-action\": gaAction}, questionType) => {\n        if (questionType === \"intro\") {\n            this.toggleMuted(false);\n        }\n        // console.log(\"quesiton type\", questionType);\n        this.advanceToNextState(link);\n        this.trackGaEvent(gaAction);\n    };\n\n    componentDidMount() {\n        this.initializeGa(this.state.config.googleAnalyticsID);\n        // Taken from Mozilla's github\n        let WebVTT = vtt.WebVTT;\n        // thanks, Safari\n        const oldVTTCue = window.VTTCue;\n\n        let parser = new WebVTT.Parser(window, WebVTT.StringDecoder()),\n            cues = [],\n            regions = [];\n        parser.oncue = function (cue) {\n            cues.push(cue);\n        };\n        parser.onregion = function (region) {\n            regions.push(region);\n        };\n        try {\n            window.VTTCue = vtt.VTTCue;\n            fetch(subtitles)\n                .then(response => response.text())\n                .then(text => {\n                    parser.parse(text);\n                    parser.flush();\n                    this.setState({cues: cues})\n                })\n        } finally {\n            window.VTTCue = oldVTTCue;\n        }\n\n    }\n\n    getCurrentCue(cues, currentTime) {\n        let currentCue;\n        [currentCue] = cues.filter(cue => currentTime >= cue.startTime && currentTime <= cue.endTime);\n        return currentCue;\n    }\n\n    onProgress = playerState => {\n        const {playedSeconds} = playerState;\n        const {currentQuestion, cues, config} = this.state;\n        const {videoEnd, showQuestion, type, nextVideoID} = config.slides[currentQuestion];\n\n        // handles which subtitle should be shown, doesn't depend on the slide type\n        this.setState({currentCue: this.getCurrentCue(cues, playedSeconds)});\n\n        switch (type) {\n            case TYPE_NEXTVIDEO:\n                if (playedSeconds >= videoEnd) {\n                    this.advanceToNextState(nextVideoID);\n                }\n                break;\n            default:\n                if (playedSeconds >= showQuestion) {\n                    this.setState({\n                        showQuestion: true\n                    })\n                }\n\n                if (playedSeconds >= videoEnd) {\n                    this.setState({\n                        showQuestion: true,\n                        playing: false\n                    });\n                }\n        }\n    };\n\n    render() {\n        const {playing, currentQuestion, config, muted, showQuestion, currentCue, volume, audioPlaying} = this.state;\n        const handlers = {\n            'toggleDebug': this.onToggleDebug\n        };\n        return (\n            <HotKeys keyMap={keyMap}\n                     handlers={handlers}\n                     focused={true}>\n\n                <ReactPlayer\n                    ref={(ref) => (this.player = ref)}\n                    url={config.videoUrl}\n                    config={{\n                        youtube: {\n                            playerVars: {\n                                showinfo: 0,\n                                controls: 0,\n                                rel: 0,\n                                disablekb: 1,\n                                modestbranding: 1,\n                                playsinline: 1\n                            }\n                        }\n                    }}\n                    progressInterval={100}\n                    volume={volume}\n                    playing={playing}\n                    width={\"auto\"}\n                    height={\"auto\"}\n                    muted={muted}\n                    className={\"player\"}\n                    onProgress={this.onProgress}\n                />\n                <Debug visible={this.state.debug}\n                       state={this.state}\n                       onForceStart={this.forceStart}\n                       onPlayPause={(e) => this.playPause(e)}\n                       onToggleMuted={this.toggleMuted}\n                       onSlideButtonClick={this.advanceToNextQuestionSlide}\n                       onNext={(e) => this.advanceToNextQuestionSlide(currentQuestion + 1, e)}/>\n                {/*<ReactHowler src={config.audioBgr}*/}\n                <ReactHowler src={\"/media/muzons_fonam.mp3\"}\n                             playing={audioPlaying}\n                             loop={true}\n                             volume={volume}\n                             mute={muted}\n                             ref={(ref) => (this.backgroundSound = ref)}/>\n                <Question config={config.slides[currentQuestion]}\n                          handleButtonClick={this.handleQuizButtonClick}\n                          showQuestion={showQuestion}/>\n                <Subtitle cue={currentCue}/>\n                <button onClick={this.toggleMuted}>{muted ? \"Unmute\" : \"Mute\"}</button>\n            </HotKeys>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}