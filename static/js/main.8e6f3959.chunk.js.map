{"version":3,"sources":["components/subtitles.vtt","components/Question.js","components/Subtitle.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ButtonItem","_ref","button","advanceState","react_default","a","createElement","className","concat","class","onClick","e","link","title","ListButtons","props","buttonsList","buttons","filter","map","key","Intro","_ref2","_props$config","config","description","RegularQuestion","_ref3","_props$config2","Outro","_ref4","_props$config3","Question","type","this","showQuestion","Component","Subtitle","cue","text","TYPE_NEXTVIDEO","App","state","playing","currentQuestion","muted","cues","currentCue","volume","playPause","_this","setState","toggleMuted","backgroundSound","mute","advanceToNextState","nextState","player","seekTo","slides","videoStart","onProgress","playerState","playedSeconds","_this$state","_config$slides$curren","videoEnd","nextVideoID","getCurrentCue","_this2","WebVTT","vtt","parser","Parser","window","StringDecoder","regions","oncue","push","onregion","region","console","log","subtitles","fetch","then","response","parse","flush","currentTime","_cues$filter","startTime","endTime","Object","slicedToArray","_this3","_this$state2","react","ReactPlayer_default","ref","url","videoUrl","youtube","playerVars","showinfo","controls","rel","disablekb","modestbranding","playsinline","progressInterval","width","height","react_howler_lib_default","src","audioBgr","loop","Question_Question","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8e6f3959.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/subtitles.966215be.vtt\";","import React, {Component} from 'react'\n\n/**\n * @return {null}\n */\nfunction ButtonItem({button, advanceState}) {\n    return <li className=\"question__answer-item\">\n        <button className={`button ${button.class}`}\n                onClick={(e) => advanceState(button.link, e)}>\n            {button.title}\n        </button>\n    </li>\n}\n\nfunction ListButtons(props) {\n    const buttonsList = props.buttons\n        // remove empty buttons from the list\n        .filter(button => button.link !== null && button.title !== \"\")\n        .map((button) =>\n            <ButtonItem key={button.title} button={button} advanceState={props.advanceState}/>\n        );\n\n    return (\n        <ul className=\"question__answer-list\">{buttonsList}</ul>\n    )\n}\n\nfunction Intro({props}) {\n    const {title, description, buttons} = props.config;\n    return <section className=\"question\">\n        <h2 className=\"question__title\">\n            {title}\n        </h2>\n        <div className=\"question__description\">\n            {description}\n        </div>\n        <ListButtons buttons={buttons} advanceState={props.advanceState}/>\n    </section>\n}\n\nfunction RegularQuestion({props}) {\n    const {title, buttons} = props.config;\n    return <section className=\"question\">\n        <h2 className=\"question__title\">{title}</h2>\n        <ListButtons buttons={buttons} advanceState={props.advanceState}/>\n    </section>\n}\n\nfunction Outro({props}) {\n    const {title, description, buttons} = props.config;\n    return <section className=\"question\">\n        <h2 className=\"question__title\">\n            {title}\n        </h2>\n        <div className=\"question__description\">\n            {description}\n        </div>\n        <ListButtons buttons={buttons} advanceState={props.advanceState}/>\n    </section>\n}\n\nexport default class Question extends Component {\n\n    render() {\n        const {type} = this.props.config;\n        if (this.props.showQuestion) {\n            switch (type) {\n                case \"intro\":\n                    return <Intro props={this.props}/>;\n                case \"outro\":\n                    return <Outro props={this.props}/>\n                case \"question\":\n                    return <RegularQuestion props={this.props}/>;\n                default:\n                    return <div>Error loading the question</div>;\n\n            }\n        } else {\n            return null;\n        }\n\n\n    }\n}","import React from 'react'\n\nexport function Subtitle ({cue}) {\n    if(cue) {\n        return <div className=\"subtitle\">{cue.text}</div>\n    } else {\n        return null;\n    }\n}","import React, {Component, Fragment} from 'react';\nimport ReactPlayer from 'react-player'\nimport config from './components/quiz-setup'\nimport vtt from 'vtt.js'\nimport subtitles from './components/subtitles.vtt'\nimport ReactHowler from 'react-howler'\n\nimport './App.scss';\nimport Question from \"./components/Question\";\nimport {Subtitle} from \"./components/Subtitle\";\n\n\nconst TYPE_NEXTVIDEO = \"nextVideo\";\n\nclass App extends Component {\n\n    state = {\n        playing: true,\n        config: config,\n        currentQuestion: 0,\n        muted: false,\n        showQuestion: true, // first slide must show immediately\n        cues: null,\n        currentCue: null,\n        volume: 0.8,\n    };\n\n    playPause = () => {\n        this.setState({playing: !this.state.playing})\n    };\n\n    toggleMuted = () => {\n        this.backgroundSound.mute(!this.state.muted);\n        this.setState({muted: !this.state.muted})\n    };\n\n    advanceToNextState = (nextState) => {\n        this.setState({\n            currentQuestion: nextState,\n            showQuestion: false,\n            playing: true\n        });\n        this.player.seekTo(this.state.config.slides[nextState].videoStart);\n    };\n\n    componentDidMount() {\n        // Taken from Mozilla's github\n        let WebVTT = vtt.WebVTT;\n        let parser = new WebVTT.Parser(window, WebVTT.StringDecoder()),\n            cues = [],\n            regions = [];\n        parser.oncue = function (cue) {\n            cues.push(cue);\n        };\n        parser.onregion = function (region) {\n            regions.push(region);\n        };\n        console.log(subtitles)\n        fetch(subtitles)\n            .then(response => response.text())\n            .then(text => {\n                parser.parse(text);\n                parser.flush();\n                this.setState({cues: cues})\n            })\n    }\n\n    getCurrentCue(cues, currentTime) {\n        let currentCue;\n        [currentCue] = cues.filter(cue => currentTime >= cue.startTime && currentTime <= cue.endTime);\n        return currentCue;\n    }\n\n    onProgress = playerState => {\n        const {playedSeconds} = playerState;\n        const {currentQuestion, cues, config} = this.state;\n        const {videoEnd, showQuestion, type, nextVideoID} = config.slides[currentQuestion];\n\n        // handles which subtitle should be shown, doesn't depend on the slide type\n        this.setState({currentCue: this.getCurrentCue(cues, playedSeconds)});\n\n        switch (type) {\n            case TYPE_NEXTVIDEO:\n                if (playedSeconds >= videoEnd) {\n                    this.advanceToNextState(nextVideoID);\n                }\n                break;\n            default:\n                if (playedSeconds >= showQuestion) {\n                    this.setState({\n                        showQuestion: true\n                    })\n                }\n\n                if (playedSeconds >= videoEnd) {\n                    this.setState({\n                        showQuestion: true,\n                        playing: false\n                    });\n                }\n        }\n    };\n\n    render() {\n        const {playing, currentQuestion, config, muted, showQuestion, currentCue, volume} = this.state;\n        return (\n            <Fragment>\n                <ReactPlayer\n                    ref={(ref) => (this.player = ref)}\n                    url={config.videoUrl}\n                    config={{\n                        youtube: {\n                            playerVars: {\n                                showinfo: 0,\n                                controls: 0,\n                                rel: 0,\n                                disablekb: 1,\n                                modestbranding: 1,\n                                playsinline: 1\n                            }\n                        }\n                    }}\n                    progressInterval={100}\n                    volume={volume}\n                    playing={playing}\n                    width={\"auto\"}\n                    height={\"auto\"}\n                    muted={muted}\n                    className={\"player\"}\n                    onProgress={this.onProgress}\n                />\n                <div className=\"controls\">\n                    <button onClick={this.playPause}>{playing ? \"Pause\" : \"Play\"}</button>\n                    <button onClick={this.toggleMuted}>{muted ? \"Unmute\" : \"Mute\"}</button>\n                    <button onClick={(e) => this.advanceToNextState(currentQuestion + 1, e)}>Next</button>\n                </div>\n                <ReactHowler src={config.audioBgr}\n                             playing={true}\n                             loop={true}\n                             volume={volume}\n                             mute={muted}\n                             ref={(ref) => (this.backgroundSound = ref)}/>\n                <Question config={config.slides[currentQuestion]}\n                          advanceState={this.advanceToNextState}\n                          showQuestion={showQuestion}/>\n                <Subtitle cue={currentCue}/>\n            </Fragment>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}